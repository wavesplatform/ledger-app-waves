/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Wed Apr 15 13:47:10 2020. */

#ifndef PB_WAVES_ORDER_PB_H_INCLUDED
#define PB_WAVES_ORDER_PB_H_INCLUDED
#include <pb.h>

#include "amount.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _waves_Order_Side {
    waves_Order_Side_BUY = 0,
    waves_Order_Side_SELL = 1
} waves_Order_Side;
#define _waves_Order_Side_MIN waves_Order_Side_BUY
#define _waves_Order_Side_MAX waves_Order_Side_SELL
#define _waves_Order_Side_ARRAYSIZE ((waves_Order_Side)(waves_Order_Side_SELL+1))

/* Struct definitions */
typedef struct _waves_AssetPair {
    pb_callback_t amount_asset_id;
    pb_callback_t price_asset_id;
/* @@protoc_insertion_point(struct:waves_AssetPair) */
} waves_AssetPair;

typedef struct _waves_Order {
    int32_t chain_id;
    pb_callback_t sender_public_key;
    pb_callback_t matcher_public_key;
    waves_AssetPair asset_pair;
    waves_Order_Side order_side;
    int64_t amount;
    int64_t price;
    int64_t timestamp;
    int64_t expiration;
    waves_Amount matcher_fee;
    int32_t version;
    pb_callback_t proofs;
/* @@protoc_insertion_point(struct:waves_Order) */
} waves_Order;

/* Default values for struct fields */

/* Initializer values for message structs */
#define waves_AssetPair_init_default             {{{NULL}, NULL}, {{NULL}, NULL}}
#define waves_Order_init_default                 {0, {{NULL}, NULL}, {{NULL}, NULL}, waves_AssetPair_init_default, _waves_Order_Side_MIN, 0, 0, 0, 0, waves_Amount_init_default, 0, {{NULL}, NULL}}
#define waves_AssetPair_init_zero                {{{NULL}, NULL}, {{NULL}, NULL}}
#define waves_Order_init_zero                    {0, {{NULL}, NULL}, {{NULL}, NULL}, waves_AssetPair_init_zero, _waves_Order_Side_MIN, 0, 0, 0, 0, waves_Amount_init_zero, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define waves_AssetPair_amount_asset_id_tag      1
#define waves_AssetPair_price_asset_id_tag       2
#define waves_Order_chain_id_tag                 1
#define waves_Order_sender_public_key_tag        2
#define waves_Order_matcher_public_key_tag       3
#define waves_Order_asset_pair_tag               4
#define waves_Order_order_side_tag               5
#define waves_Order_amount_tag                   6
#define waves_Order_price_tag                    7
#define waves_Order_timestamp_tag                8
#define waves_Order_expiration_tag               9
#define waves_Order_matcher_fee_tag              10
#define waves_Order_version_tag                  11
#define waves_Order_proofs_tag                   12

/* Struct field encoding specification for nanopb */
extern const pb_field_t waves_AssetPair_fields[3];
extern const pb_field_t waves_Order_fields[13];

/* Maximum encoded size of messages (where known) */
/* waves_AssetPair_size depends on runtime parameters */
/* waves_Order_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ORDER_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
